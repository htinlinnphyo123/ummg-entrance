<?php

namespace BasicDashboard\Web\Pages\Services;

use Exception;
use Illuminate\View\View;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use BasicDashboard\Web\Common\BaseController;
use BasicDashboard\Web\Pages\Resources\PageResource;
use BasicDashboard\Web\Pages\Resources\EditPageResource;
use BasicDashboard\Foundations\Domain\Pages\Repositories\PageRepositoryInterface;

/**
 *
 * A PageService is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class PageService extends BaseController
{
    const VIEW = 'admin.page';
    const ROUTE = 'pages';
    const LANG_PATH = "page.page";

    public function __construct(
        private PageRepositoryInterface $pageRepository,
    )
    {
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function index(array $request): View
    {
        $pageList = $this->pageRepository->getPageList($request);
        $pageList = PageResource::collection($pageList)->response()->getData(true);
        return $this->returnView(self::VIEW.".index", $pageList, $request);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function create(): View
    {
        return view(self::VIEW.'.create');
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function store($request): JsonResponse
    {
        try {
            //get link count to generate presigned url
            $link_count = $request['link_count'];            
            unset($request['link_count']);

            $this->pageRepository->beginTransaction();

            $model = $this->pageRepository->insert($request);

            //FOR LINK FIELD (MEDIA image,pdf,video,audio)
            $path = "pages" . '/' . $model['id'];
            $generatedUrl = $this->generatePresignedUrl($link_count,$path);
            $paths = array_column($generatedUrl, 'path'); // to store in db
            $urls = array_column($generatedUrl,'url'); //to return to frontend 

            //thumbnail store
            $thumbnailPath = isset($request['thumbnail']) ? uploadImageToDigitalOcean($request['thumbnail'],$path) : null;
            $model->update([
                'link' => $paths,
                'thumbnail' => $thumbnailPath
            ]);
            $this->pageRepository->commit();

            return response()->json([
                'message' => __(self::LANG_PATH . '_created'),
                'responseType' => 'success',
                'status' => 200,
                'data' => $urls,
                'id' => customEncoder($model['id'])
            ]);
        } catch (Exception $e) {
            return $this->sendAjaxError($e->getMessage());
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function edit(string $id): View | RedirectResponse
    {
        $page = $this->pageRepository->edit($id);
        $page = new EditPageResource($page);
        $page = $page->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . ".edit", $page);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function show(string $id): View | RedirectResponse
    {
        $page = $this->pageRepository->show($id);
        $page = new PageResource($page);
        $page = $page->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . '.show', $page);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function update($request, string $id): JsonResponse
    {
        try {
            //get link count to generate presigned url
            $link_count = $request['link_count'];        
            // \Log::info($link_count);   
            unset($request['link_count']);
            //deleted media if user delete from client side
            $deletedMediaArray = json_decode($request['deleteArray']);
            if(count($deletedMediaArray)>0){
                // rsort($deletedMedia);
                $getModel = $this->pageRepository->show($id)->toArray();
                $orgMediaArray = $getModel['link'];
                $filteredArray = [];
                // \Log::info($orgMediaArray,$deletedMediaArray);
                foreach ($orgMediaArray as $index => $element) {
                    if (!in_array($index, $deletedMediaArray)) {
                        $filteredArray[] = $element;
                    }else{
                        //will be remove in digitalocean if the item is deleted
                        $this->deleteImage($element);
                    }
                } 
                $request['link'] = $filteredArray;
            }
            unset($request['deleteArray']);

            $this->pageRepository->beginTransaction();
            $this->pageRepository->update($request, $id);

            //for new model
            $model = $this->pageRepository->show($id);
            $path = "pages" . '/' . $model['id'];
            $generatedArray = $this->generatePresignedUrl($link_count,$path);
            $generatedPaths = array_column($generatedArray, 'path'); // that return from presignedURL
            $orgMediaArray = $model['link']; //original array that store in DB
            //UPDATE Thumbnail and Media(link) if new files are added
            $newPaths = count($generatedPaths)>0 ? array_merge($orgMediaArray,$generatedPaths) : $orgMediaArray;
            $thumbnailPath = isset($request['thumbnail']) ? uploadImageToDigitalOcean($request['thumbnail'],$path) : $model['thumbnail'];
            
            $generatedUrls = array_column($generatedArray,'url'); //to return to frontend 
            $model->update([
                'link' => $newPaths,
                'thumbnail' => $thumbnailPath
            ]);

            $this->pageRepository->commit();
            return response()->json([
                'message' => __(self::LANG_PATH . '_created'),
                'responseType' => 'success',
                'status' => 200,
                'data' => $generatedUrls,
                'id' => customEncoder($model['id'])
            ]);
        } catch (Exception $e) {
            return $this->sendAjaxError($e->getMessage());
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function destroy($request): RedirectResponse
    {
         try {
            $this->pageRepository->beginTransaction();
            $this->pageRepository->delete($request['id']);
            $this->pageRepository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->pageRepository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////
}
