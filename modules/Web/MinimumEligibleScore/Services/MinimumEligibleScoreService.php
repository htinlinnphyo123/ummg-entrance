<?php

namespace BasicDashboard\Web\MinimumEligibleScore\Services;

use BasicDashboard\Foundations\Domain\MinimumEligibleScore\Repositories\MinimumEligibleScoreRepositoryInterface;
use BasicDashboard\Web\Common\BaseController;
use BasicDashboard\Web\MinimumEligibleScore\Resources\MinimumEligibleScoreResource;
use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;
use Exception;

/**
 *
 * A MinimumEligibleScoreService is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class MinimumEligibleScoreService extends BaseController
{
    const VIEW = 'admin.minimum-eligible-score';
    const ROUTE = 'minimumEligibleScores';
    const LANG_PATH = "minimumEligibleScore.minimumEligibleScore";

    public function __construct(
        private MinimumEligibleScoreRepositoryInterface $minimumEligibleScoreRepositoryInterface,
    )
    {
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function index(array $request): View
    {
        $minimumEligibleScoreList = $this->minimumEligibleScoreRepositoryInterface->getMinimumEligibleScoreList($request);
        $minimumEligibleScoreList = MinimumEligibleScoreResource::collection($minimumEligibleScoreList)->response()->getData(true);
        return $this->returnView(self::VIEW.".index", $minimumEligibleScoreList, $request);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function create(): View
    {
        return view(self::VIEW.'.create');
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function store($request): RedirectResponse
    {
        try {
            $this->minimumEligibleScoreRepositoryInterface->beginTransaction();
            $this->minimumEligibleScoreRepositoryInterface->insert($request);
            $this->minimumEligibleScoreRepositoryInterface->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_created'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->minimumEligibleScoreRepositoryInterface, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function edit(string $id): View | RedirectResponse
    {
        $minimumEligibleScore = $this->minimumEligibleScoreRepositoryInterface->edit($id);
        $minimumEligibleScore = new MinimumEligibleScoreResource($minimumEligibleScore);
        $minimumEligibleScore = $minimumEligibleScore->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . ".edit", $minimumEligibleScore);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function show(string $id): View | RedirectResponse
    {
        $minimumEligibleScore = $this->minimumEligibleScoreRepositoryInterface->show($id);
        $minimumEligibleScore = new MinimumEligibleScoreResource($minimumEligibleScore);
        $minimumEligibleScore = $minimumEligibleScore->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . '.show', $minimumEligibleScore);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function update($request, string $id): RedirectResponse
    {
         try {
            $this->minimumEligibleScoreRepositoryInterface->beginTransaction();
            $this->minimumEligibleScoreRepositoryInterface->update($request, $id);
            $this->minimumEligibleScoreRepositoryInterface->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_updated'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->minimumEligibleScoreRepositoryInterface, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function destroy($request): RedirectResponse
    {
         try {
            $this->minimumEligibleScoreRepositoryInterface->beginTransaction();
            $this->minimumEligibleScoreRepositoryInterface->delete($request['id']);
            $this->minimumEligibleScoreRepositoryInterface->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->minimumEligibleScoreRepositoryInterface, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////
}
