<?php

namespace BasicDashboard\Web\SingleEduEligibleMarks\Services;

use BasicDashboard\Foundations\Domain\SingleEduEligibleMarks\Repositories\SingleEduEligibleMarkRepositoryInterface;
use BasicDashboard\Web\Common\BaseController;
use BasicDashboard\Web\SingleEduEligibleMarks\Resources\SingleEduEligibleMarkResource;
use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;
use Exception;

/**
 *
 * A SingleEduEligibleMarkService is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class SingleEduEligibleMarkService extends BaseController
{
    const VIEW = 'admin.singleEduEligibleMark';
    const ROUTE = 'singleEduEligibleMarks';
    const LANG_PATH = "singleEduEligibleMark.singleEduEligibleMark";

    public function __construct(
        private SingleEduEligibleMarkRepositoryInterface $singleEduEligibleMarkRepositoryInterface,
    )
    {
    }

    public function index(array $request): View
    {
        $singleEduEligibleMarkList = $this->singleEduEligibleMarkRepositoryInterface->getSingleEduEligibleMarkList($request);
        $singleEduEligibleMarkList = SingleEduEligibleMarkResource::collection($singleEduEligibleMarkList)->response()->getData(true);
        return $this->returnView(self::VIEW.".index", $singleEduEligibleMarkList, $request);
    }

    public function edit(string $id): View | RedirectResponse
    {
        $singleEduEligibleMark = $this->singleEduEligibleMarkRepositoryInterface->edit($id);
        if(!$singleEduEligibleMark) abort(404);
        $singleEduEligibleMark = new SingleEduEligibleMarkResource($singleEduEligibleMark);
        $singleEduEligibleMark = $singleEduEligibleMark->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . ".edit", $singleEduEligibleMark);
    }

    public function update($request, string $id): RedirectResponse
    {
         try {
            $this->singleEduEligibleMarkRepositoryInterface->beginTransaction();
            $this->singleEduEligibleMarkRepositoryInterface->update($request, $id);
            $this->singleEduEligibleMarkRepositoryInterface->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_updated'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->singleEduEligibleMarkRepositoryInterface, $e);
        }
    }

    public function destroy($request): RedirectResponse
    {
         try {
            $this->singleEduEligibleMarkRepositoryInterface->beginTransaction();
            $this->singleEduEligibleMarkRepositoryInterface->delete($request['id']);
            $this->singleEduEligibleMarkRepositoryInterface->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->singleEduEligibleMarkRepositoryInterface, $e);
        }
    }
}
