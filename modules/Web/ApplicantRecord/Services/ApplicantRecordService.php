<?php

namespace BasicDashboard\Web\ApplicantRecord\Services;

use BasicDashboard\Foundations\Domain\ApplicantRecord\Repositories\ApplicantRecordRepositoryInterface;
use BasicDashboard\Web\ApplicantRecord\Resources\ApplicantRecordIndexResource;
use BasicDashboard\Web\Common\BaseController;
use BasicDashboard\Web\ApplicantRecord\Resources\ApplicantRecordResource;
use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;
use Exception;
use Illuminate\Http\JsonResponse;

/**
 *
 * A ApplicantRecordService is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class ApplicantRecordService extends BaseController
{
    const VIEW = 'admin.applicant-record';
    const ROUTE = 'applicantRecords';
    const LANG_PATH = "applicantRecord.applicantRecord";

    public function __construct(
        private ApplicantRecordRepositoryInterface $applicantRecordRepositoryInterface,
    )
    {
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function index(array $request): View
    {
        $applicantRecordList = $this->applicantRecordRepositoryInterface->getApplicantRecordList($request);
        $applicantRecordCount = $this->applicantRecordRepositoryInterface->getCount($request);
        $applicantRecordList = ApplicantRecordIndexResource::collection($applicantRecordList)->response()->getData(true);
        return $this->returnView(self::VIEW.".index", data: [$applicantRecordList,$applicantRecordCount]);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function create(): View
    {
        return view(self::VIEW.'.create');
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function store($request): RedirectResponse
    {
        try {
            $this->applicantRecordRepositoryInterface->beginTransaction();
            $this->applicantRecordRepositoryInterface->insert($request);
            $this->applicantRecordRepositoryInterface->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_created'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->applicantRecordRepositoryInterface, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function edit(string $id): View | RedirectResponse
    {
        $applicantRecord = $this->applicantRecordRepositoryInterface->edit($id);
        $applicantRecord = new ApplicantRecordResource($applicantRecord);
        $applicantRecord = $applicantRecord->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . ".edit", $applicantRecord);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function show(string $id): View | RedirectResponse
    {
        $applicantRecord = $this->applicantRecordRepositoryInterface->show($id);
        $applicantRecord = new ApplicantRecordResource($applicantRecord);
        $applicantRecord = $applicantRecord->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . '.show', $applicantRecord);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function update($request, string $id): RedirectResponse
    {
         try {
            $this->applicantRecordRepositoryInterface->beginTransaction();
            $this->applicantRecordRepositoryInterface->update($request, $id);
            $this->applicantRecordRepositoryInterface->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_updated'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->applicantRecordRepositoryInterface, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function destroy($id): RedirectResponse
    {
         try {
            $this->applicantRecordRepositoryInterface->beginTransaction();
            $this->applicantRecordRepositoryInterface->delete($id);
            $this->applicantRecordRepositoryInterface->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->applicantRecordRepositoryInterface, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function manualEligible(string $id): RedirectResponse
    {
        try {
            $this->applicantRecordRepositoryInterface->beginTransaction();
            $this->applicantRecordRepositoryInterface->connection(true)->where('id', $id)->update(['manual_eligible' => true]);
            $this->applicantRecordRepositoryInterface->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_manualEligible'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->applicantRecordRepositoryInterface, $e);
        }
    }

    public function updateFinalTake($request, string $id): JsonResponse
    {
        try {
            $this->applicantRecordRepositoryInterface->beginTransaction();
            $this->applicantRecordRepositoryInterface->connection(true)->where('id', $id)->update(['final_take' => $request]);
            $this->applicantRecordRepositoryInterface->commit();
            return response()->json(['message' => __(self::LANG_PATH . '_updateFinalTake')]);
        } catch (Exception $e) {
            return response()->json(['error' => $e->getMessage()], 500);
        }
    }

}
