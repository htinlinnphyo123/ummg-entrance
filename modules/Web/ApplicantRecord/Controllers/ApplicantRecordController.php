<?php

namespace BasicDashboard\Web\ApplicantRecord\Controllers;

use BasicDashboard\Web\Common\BaseController;
use BasicDashboard\Web\ApplicantRecord\Services\ApplicantRecordService;
use BasicDashboard\Web\ApplicantRecord\Validation\StoreApplicantRecordRequest;
use BasicDashboard\Web\ApplicantRecord\Validation\UpdateApplicantRecordRequest;
use BasicDashboard\Web\ApplicantRecord\Validation\DeleteApplicantRecordRequest;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;

/**
 *
 * A ApplicantRecordController is responsible for receive request and return response.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class ApplicantRecordController extends BaseController
{
    public function __construct(
        private ApplicantRecordService $applicantRecordService
    ) {
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function index(Request $request): View
    {
        return $this->applicantRecordService->index($request->all());
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function create(): View
    {
        return $this->applicantRecordService->create();
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function store(StoreApplicantRecordRequest $request): RedirectResponse
    {
        return $this->applicantRecordService->store($request->validated());
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function edit(string $id): View | RedirectResponse
    {
        return $this->applicantRecordService->edit($id);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function show(string $id): View | RedirectResponse
    {
        return $this->applicantRecordService->show($id);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function update(UpdateApplicantRecordRequest $request, string $id): RedirectResponse
    {
        return $this->applicantRecordService->update($request->validated(), $id);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function destroy(string $id): RedirectResponse
    {
        return $this->applicantRecordService->destroy($id);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function manualEligible($id): RedirectResponse
    {
        return $this->applicantRecordService->manualEligible($id);
    }

    public function updateFinalTake(Request $request, $id): JsonResponse
    {
        return $this->applicantRecordService->updateFinalTake($request->final_take, $id);
    }

}
